import pandas as pd
import os
from itertools import combinations

configfile: "PPICompare_workflow/config.yaml"

PPIXPRESS_RESULT_PATH = config['PPIXpress_result_path']
PPIXPRESS_OPTIONS = config['PPIXpress_options']
TISSUE_LIST = [x for x in os.listdir(PPIXPRESS_RESULT_PATH) if (not x in ["reference", "mRNP_chrono"])]
TISSUE_COMBINATION = ["_".join(x) for x in combinations(sorted(TISSUE_LIST, key=str.lower), 2)]

PPICOMPARE_JAR =  config['PPICompare_jar']
PPICOMPARE_RESULT_PATH =  config['PPICompare_result_path']
PPICOMPARE_OPTIONS = config['PPICompare_options']

rule all:
	input:
		grouped_PPIN=expand(PPICOMPARE_RESULT_PATH + "/{TISSUE_COMBINATION}", TISSUE_COMBINATION=TISSUE_COMBINATION)
	log:
		"logs/pipeline.log"
	run: 
		print(input.grouped_PPIN)

rule PPICompare:
	input:
		PPIXpress_result_path=PPIXPRESS_RESULT_PATH
	output:
		PPICompare_results=directory(PPICOMPARE_RESULT_PATH + '/{TISSUE_COMBINATION}')
	run:
		tissue_1 = wildcards.TISSUE_COMBINATION.split("_")[0]
		tissue_2 = wildcards.TISSUE_COMBINATION.split("_")[1]

		PPIN_1 = PPIXPRESS_RESULT_PATH + "/" + tissue_1
		PPIN_2 = PPIXPRESS_RESULT_PATH + "/" + tissue_2
		shell(f"java -jar {PPICOMPARE_JAR} {PPICOMPARE_OPTIONS} {PPIN_1} {PPIN_2} {output.PPICompare_results}")

rule PPICompare:
	input:
		PPIXpress_result_path=PPIXPRESS_RESULT_PATH
	output:
		PPICompare_results=directory(PPICOMPARE_RESULT_PATH + '/{TISSUE_COMBINATION}')
	run:
		tissue_1 = wildcards.TISSUE_COMBINATION.split("_")[0]
		tissue_2 = wildcards.TISSUE_COMBINATION.split("_")[1]

		PPIN_1 = PPIXPRESS_RESULT_PATH + "/" + tissue_1
		PPIN_2 = PPIXPRESS_RESULT_PATH + "/" + tissue_2
		shell(f"java -jar {PPICOMPARE_JAR} {PPICOMPARE_OPTIONS} {PPIN_1} {PPIN_2} {output.PPICompare_results}")
			